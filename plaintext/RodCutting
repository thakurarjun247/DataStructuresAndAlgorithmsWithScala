/*
The Longest Increasing Subsequence (LIS)
problem is to find the length of the longest subsequence
 of a given sequence such that all elements of the subsequence
  are sorted in increasing order. For example,
  Input  : arr[] = {3, 10, 2, 1, 20}
  Output : Length of LIS = 3
  The longest increasing subsequence is 3, 10, 20

  Input  : arr[] = {3, 2}
  Output : Length of LIS = 1
  The longest increasing subsequences are {3} and {2}

  Input : arr[] = {50, 3, 10, 7, 40, 80}
  Output : Length of LIS = 4
  The longest increasing subsequence is {3, 7, 40, 80}
*/

def f(a:Array[Int], maxSoFar:Int):Int={
val currentItem=a.head
for(i<-1 to a.size-1)
{
a(i)
.map(item=>if(a.head<item) 1+(a.tail))
.max
}
}

a.tail.map(item=>if(a.head<item) 1+f() )
}